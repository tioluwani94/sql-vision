// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for NextAuth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  databases     Database[]
  queries       Query[]
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Database connection model
model Database {
  id              String    @id @default(cuid())
  name            String
  description     String?
  type            String    // postgresql, mysql, etc.
  host            String
  port            Int
  username        String
  password        String
  dbName          String
  ssl             Boolean   @default(false)
  useSSH          Boolean   @default(false)
  sshHost         String?
  sshPort         Int?      @default(22)
  sshUsername     String?
  sshPassword     String?
  sshPrivateKey   String?   @db.Text
  sshPassphrase   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  queries         Query[]
}

// Query history model
model Query {
  id          String    @id @default(cuid())
  naturalText String    @db.Text
  sqlQuery    String    @db.Text
  explanation String?   @db.Text
  result      Json?
  chartConfig Json?
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  databaseId  String
  database    Database  @relation(fields: [databaseId], references: [id], onDelete: Cascade)
}